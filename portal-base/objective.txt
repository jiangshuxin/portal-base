1.前后端结合
1.1 使spring支持 ajax/json             （OK，请求时不能传递中文）
1.2 设计后台模型绑定EasyUI   设计模型对应的数据库表
  1.2.1 设计布局模型（JSP层面）
  1.2.2 设计菜单模型（后台模型）
  1.2.3 设计list页面（JSP层面）
  1.2.4 设计info页面（JSP层面）  分栏  分组  表单处理
1.3 设计API 调用时序   JSP include顺序
1.4 JSP模块
  1.4.1 封装自定义标签
  
  1.4.2 前端数据校验    后台数据校验   做统一的错误提示，后台信息返回等
  
  1.4.3 表单到后台，自动类型转换，如前端输入2012-09-09 ，后台拿到一个自定义的DTO对象(设计这个适用于Web层面的DTO，模仿AmarJBO，TPF的Field)
      1.4.3.1 DTO功能细则
        1.4.3.1.1 该模型能容括所有Java的基础类型，因为会做几个部分的DTO，必须要抽象出一个基础类型
        1.4.3.1.2 该模型为Spring Validate提供服务
        1.4.3.1.3 该模型能给jsp中EL表达式使用
        1.4.3.1.4 该模型能结合jstl自定义标记库做相应扩展
        1.4.3.1.5 该模型能结合hibernate的model
1.5 所有组件通过jsp include功能进来

2.拦截器功能
  2.1 session拦截
  2.2 重复请求拦截（表单重复提交）
  2.3 公共异常处理拦截

3.web基础功能
  3.1 验证码
  3.2 国际化
  3.3 ajax直接调用后台service bean
  3.4 表单验证 
  3.5 文件下载
  3.6 分页基础功能结合GenericDao做，属于list页面基础功能


4.细微功能
  4.1 自动提示
  4.2 用户，角色，权限  （享元，角色与url关联）
  4.3 系统功能地图
  4.4 系统功能搜索
  
5.用好spring
  5.1 灵活运用自动扫包功能，不要在配置文件中啰嗦每一个Impl Bean，如model，daoImpl，serviceImpl，Controller，包命名必须规范  @Repository、@Service、@Controller 和 @Component
  5.2 集成hibernate，运用genericDAO，对于领域模型，留有View方面的扩展
  5.3 集成ibatis，利用其动态sql的特点，负责实现复杂业务要求
  5.4 合理运用aop切面做相应业务扩展
  
6.JavaEE基础功能 
  6.1 邮件功能
  6.2 RPC设计  Jax-ws  Jax-rs（JSR 311） JMS
  6.3 tomcat集群
  6.4 负载均衡  流量控制  
  
7.数据库
  7.1 c3p0作为连接池的首选工具
  7.2 使用oracle
  
8.系统层面
  8.1 系统的任何基础功能都是可拔插的，由统一的入口管理